let chalk,fs,path,URL,ncp,promisify,Listr,createDatabase,appConfig,cloneCMS;_5db‍.x([["default",()=>createCMS]]);_5db‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_5db‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_5db‍.w("path",[["default",["path"],function(v){path=v}]]);_5db‍.w("url",[["URL",["URL"],function(v){URL=v}]]);_5db‍.w("ncp",[["default",["ncp"],function(v){ncp=v}]]);_5db‍.w("util",[["promisify",["promisify"],function(v){promisify=v}]]);_5db‍.w("listr",[["default",["Listr"],function(v){Listr=v}]]);_5db‍.w("./sql",[["createDatabase",["createDatabase"],function(v){createDatabase=v}]]);_5db‍.w("./app.config.js",[["default",["appConfig"],function(v){appConfig=v}]]);_5db‍.w("./cloneCMS",[["default",["cloneCMS"],function(v){cloneCMS=v}]]);










const access = promisify(fs.access)

async function copyAPIFiles (options) {
  return await cloneCMS(options)
}

               async function createCMS (options) {
  options = {
    ...options,
    targetDirectory: options.targetDirectory || process.cwd(),
  }

  try {
    await access(`${options.targetDirectory}`, fs.constants.R_OK)
  } catch (err) {
    _5db‍.g.console.error(`%s Error creating database: ${err}`, chalk.red.bold('ERROR'))
    process.exit(1)
  }

  console.log('Creating database');

  const tasks = new Listr([
    {
      title: 'Copy headless API files',
      task: () => copyAPIFiles(options)
    },
    {
      title: 'Create MYSQL database',
      task: () => createDatabase(options)
    },
    {
      title: 'Configure API',
      task: () => htaccessFile(options)
    }
  ])

  await tasks.run()

  return true
}

async function htaccessFile (options) {
  const markup = `
    # BEGIN WordPress
    <IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteBase /
    RewriteRule ^index\.php$ - [L]
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteRule . /index.php [L]
    </IfModule>

    SetEnv DB_NAME ${options.databaseName}
    SetEnv DB_USER ${options.databaseUser}
    SetEnv DB_PASSWORD ${options.databasePassword}
    SetEnv DB_HOST ${options.databaseHost}

    # END WordPress
  `

  fs.writeFile(
    `${options.targetDirectory}/api/.htaccess`,
    markup,
    'utf8',
    err => err ? _5db‍.g.console.log(`%s Issue writing the .htaccess file:  ${err}`, chalk.red.bold('ERROR')) : ''
  )

  _5db‍.g.console.error(
    `%s Success! now add ${options.cmsUrl} to MAMP PRO and then visit ${options.cmsUrl}/wp-admin`,
    chalk.green.bold('DONE')
  )
}
