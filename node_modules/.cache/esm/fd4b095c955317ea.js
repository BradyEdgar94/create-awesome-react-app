let chalk,fs,ncp,path,promisify,URL,execa,Listr,projectInstall,createDatabase,npm,cloneTemplate;_955‍.x([["default",()=>createProject]]);_955‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_955‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_955‍.w("ncp",[["default",["ncp"],function(v){ncp=v}]]);_955‍.w("path",[["default",["path"],function(v){path=v}]]);_955‍.w("util",[["promisify",["promisify"],function(v){promisify=v}]]);_955‍.w("url",[["URL",["URL"],function(v){URL=v}]]);_955‍.w("execa",[["default",["execa"],function(v){execa=v}]]);_955‍.w("listr",[["default",["Listr"],function(v){Listr=v}]]);_955‍.w("pkg-install",[["projectInstall",["projectInstall"],function(v){projectInstall=v}]]);_955‍.w("./sql",[["createDatabase",["createDatabase"],function(v){createDatabase=v}]]);_955‍.w("npm-programmatic",[["default",["npm"],function(v){npm=v}]]);_955‍.w("./cloneTemplate",[["default",["cloneTemplate"],function(v){cloneTemplate=v}]]);












const access = promisify(fs.access)

async function copyTemplateFiles (options) {
    return await cloneTemplate(options)
}

async function initGit (options) {
  const result = await execa('git', ['init'], {
    cwd: options.targetDirectory
  })

  if (result.failed) {
    return Promise.reject(new Error('Failed to initialize git'))
  }

  return true
}

               async function createProject (options) {
  options = {
    ...options,
    targetDirectory: options.targetDirectory || process.cwd(),
  }

  try {
    await access(`${options.targetDirectory}`, fs.constants.R_OK)
  } catch (err) {
    _955‍.g.console.error('%s Invalid template name', chalk.red.bold('ERROR'))
    process.exit(1)
  }

  console.log('Copying template files');

  const tasks = new Listr([
    {
      title: 'Copy frontend project files',
      task: () => copyTemplateFiles(options)
    },
    {
      title: 'initialize git',
      task: () => initGit(options),
      enabled: () => options.git
    },
    {
      title: 'Install dependencies',
      task: () => npm.install(`${options.targetDirectory}/frontend`, {
        cwd: `${options.targetDirectory}/frontend`,
        save: true
      }),
      skip: () =>!options.runInstall
        ? 'Pass --install to automatically install dependencies'
        : undefined
    }
  ])

  await tasks.run()
  _955‍.g.console.log('%s Project frontend is created', chalk.green.bold('DONE'))

  return true
}
